# Description: revert upstream commit that remove support of vino sharing
# Bug: https://bugs.launchpad.net/ubuntu/+source/gnome-control-center/+bug/1892484
# Forwarded: not needed
Index: gnome-control-center/panels/sharing/cc-sharing-panel.c
===================================================================
--- gnome-control-center.orig/panels/sharing/cc-sharing-panel.c
+++ gnome-control-center/panels/sharing/cc-sharing-panel.c
@@ -24,6 +24,7 @@
 
 #include "list-box-helper.h"
 #include "cc-sharing-resources.h"
+#include "vino-preferences.h"
 #include "cc-remote-login.h"
 #include "file-share-properties.h"
 #include "cc-media-sharing.h"
@@ -42,6 +43,7 @@ static void cc_sharing_panel_setup_label
 static GtkWidget *cc_sharing_panel_new_media_sharing_row (const char     *uri_or_path,
                                                           CcSharingPanel *self);
 
+#define VINO_SCHEMA_ID "org.gnome.Vino"
 #define FILE_SHARING_SCHEMA_ID "org.gnome.desktop.file-sharing"
 #define GNOME_REMOTE_DESKTOP_SCHEMA_ID "org.gnome.desktop.remote-desktop"
 #define GNOME_REMOTE_DESKTOP_VNC_SCHEMA_ID "org.gnome.desktop.remote-desktop.vnc"
@@ -1005,6 +1007,67 @@ screen_sharing_password_insert_text_cb (
 #undef MAX_PASSWORD_SIZE
 
 static void
+cc_sharing_panel_setup_screen_sharing_dialog_vino (CcSharingPanel *self)
+{
+  GSettings *settings;
+  GtkWidget *networks, *box, *w;
+
+  cc_sharing_panel_bind_switch_to_widgets (self->require_password_radiobutton,
+                                           self->password_grid,
+                                           NULL);
+
+  cc_sharing_panel_setup_label_with_hostname (self,
+                                              self->screen_sharing_label);
+
+  /* settings bindings */
+  settings = g_settings_new (VINO_SCHEMA_ID);
+  g_settings_bind (settings, "view-only", self->remote_control_checkbutton,
+                   "active",
+                   G_SETTINGS_BIND_DEFAULT | G_SETTINGS_BIND_INVERT_BOOLEAN);
+  g_settings_bind (settings, "prompt-enabled",
+                   self->approve_connections_radiobutton, "active",
+                   G_SETTINGS_BIND_DEFAULT);
+  g_settings_bind_with_mapping (settings, "authentication-methods",
+                                self->require_password_radiobutton,
+                                "active",
+                                G_SETTINGS_BIND_DEFAULT,
+                                vino_get_authtype, vino_set_authtype, NULL, NULL);
+
+  g_settings_bind_with_mapping (settings, "vnc-password",
+                                self->remote_control_password_entry,
+                                "text",
+                                G_SETTINGS_BIND_DEFAULT,
+                                vino_get_password, vino_set_password, NULL, NULL);
+
+  g_object_bind_property (self->show_password_checkbutton, "active",
+                          self->remote_control_password_entry, "visibility",
+                          G_BINDING_SYNC_CREATE);
+
+  /* make sure the password entry is hidden by default */
+  g_signal_connect_object (self->screen_sharing_dialog, "show",
+                           G_CALLBACK (screen_sharing_show_cb), self, G_CONNECT_SWAPPED);
+
+  g_signal_connect_object (self->screen_sharing_dialog, "hide",
+                           G_CALLBACK (screen_sharing_hide_cb), self, G_CONNECT_SWAPPED);
+
+  /* accept at most 8 bytes in password entry */
+  g_signal_connect_object (self->remote_control_password_entry, "insert-text",
+                           G_CALLBACK (screen_sharing_password_insert_text_cb), self, G_CONNECT_SWAPPED);
+
+  networks = cc_sharing_networks_new (self->sharing_proxy, "vino-server");
+  box = self->remote_control_box;
+  gtk_box_pack_end (GTK_BOX (box), networks, TRUE, TRUE, 0);
+  gtk_widget_show (networks);
+
+  w = cc_sharing_switch_new (networks);
+  gtk_header_bar_pack_start (GTK_HEADER_BAR (self->screen_sharing_headerbar), w);
+  self->screen_sharing_switch = w;
+
+  cc_sharing_panel_bind_networks_to_label (self, networks,
+                                           self->screen_sharing_row);
+}
+
+static void
 on_vnc_password_entry_notify_text (CcSharingPanel *self)
 {
   cc_grd_store_vnc_password (gtk_entry_get_text (GTK_ENTRY (self->remote_control_password_entry)), cc_panel_get_cancellable (CC_PANEL (self)));
@@ -1163,8 +1226,18 @@ sharing_proxy_ready (GObject      *sourc
   cc_sharing_panel_setup_remote_login_dialog (self);
 
   /* screen sharing */
-  check_remote_desktop_available (self);
-  gtk_widget_hide (self->screen_sharing_row);
+#ifdef GDK_WINDOWING_WAYLAND
+  if (GDK_IS_WAYLAND_DISPLAY (gdk_display_get_default ()))
+    {
+      check_remote_desktop_available (self);
+      gtk_widget_hide (self->screen_sharing_row);
+    }
+  else
+#endif
+  if (cc_sharing_panel_check_schema_available (self, VINO_SCHEMA_ID))
+    cc_sharing_panel_setup_screen_sharing_dialog_vino (self);
+  else
+    gtk_widget_hide (self->screen_sharing_row);
 }
 
 static void
Index: gnome-control-center/panels/sharing/meson.build
===================================================================
--- gnome-control-center.orig/panels/sharing/meson.build
+++ gnome-control-center/panels/sharing/meson.build
@@ -45,6 +45,7 @@ sources = files(
   'cc-sharing-switch.c',
   'cc-gnome-remote-desktop.c',
   'file-share-properties.c',
+  'vino-preferences.c'
 )
 
 resource_data = files(
Index: gnome-control-center/panels/sharing/vino-preferences.c
===================================================================
--- /dev/null
+++ gnome-control-center/panels/sharing/vino-preferences.c
@@ -0,0 +1,111 @@
+/*
+ * Copyright (C) 2003 Sun Microsystems, Inc.
+ * Copyright (C) 2006 Jonh Wendell <wendell@bani.com.br> 
+ * Copyright © 2010 Codethink Limited
+ * Copyright (C) 2013 Intel, Inc
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation; either version 2 of the
+ * License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful, but
+ * WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, see <http://www.gnu.org/licenses/>.
+ *
+ * Authors:
+ *      Mark McLoughlin <mark@skynet.ie>
+ *      Jonh Wendell <wendell@bani.com.br>
+ *      Ryan Lortie <desrt@desrt.ca>
+ */
+
+#include "vino-preferences.h"
+#include <string.h>
+
+#include <glib/gi18n.h>
+
+gboolean
+vino_get_authtype (GValue   *value,
+                   GVariant *variant,
+                   gpointer  user_data)
+{
+  GVariantIter iter;
+  const gchar *type;
+
+  g_variant_iter_init (&iter, variant);
+  g_value_set_boolean (value, TRUE);
+
+  while (g_variant_iter_next (&iter, "&s", &type))
+    if (strcmp (type, "none") == 0)
+      g_value_set_boolean (value, FALSE);
+
+  return TRUE;
+}
+
+GVariant *
+vino_set_authtype (const GValue       *value,
+                   const GVariantType *type,
+                   gpointer            user_data)
+{
+  const gchar *authtype;
+
+  if (g_value_get_boolean (value))
+    authtype = "vnc";
+  else
+    authtype = "none";
+
+  return g_variant_new_strv (&authtype, 1);
+}
+
+gboolean
+vino_get_password (GValue   *value,
+                   GVariant *variant,
+                   gpointer  user_data)
+{
+  const gchar *setting;
+
+  setting = g_variant_get_string (variant, NULL);
+
+  if (strcmp (setting, "keyring") == 0)
+    {
+      /* "keyring" is the default value, even though vino doesn't support it at
+       * the moment */
+
+      g_value_set_static_string (value, "");
+      return TRUE;
+    }
+  else
+    {
+      gchar *decoded;
+      gsize length;
+      gboolean ok;
+
+      decoded = (gchar *) g_base64_decode (setting, &length);
+
+      if ((ok = g_utf8_validate (decoded, length, NULL)))
+        g_value_take_string (value, g_strndup (decoded, length));
+
+      return ok;
+    }
+}
+
+GVariant *
+vino_set_password (const GValue       *value,
+                   const GVariantType *type,
+                   gpointer            user_data)
+{
+  const gchar *string;
+  gchar *base64;
+
+  string = g_value_get_string (value);
+
+  base64 = g_base64_encode ((guchar *) string, strlen (string));
+  return g_variant_new_from_data (G_VARIANT_TYPE_STRING,
+                                  base64, strlen (base64) + 1,
+                                  TRUE, g_free, base64);
+}
+
Index: gnome-control-center/panels/sharing/vino-preferences.h
===================================================================
--- /dev/null
+++ gnome-control-center/panels/sharing/vino-preferences.h
@@ -0,0 +1,45 @@
+/*
+ * Copyright (C) 2003 Sun Microsystems, Inc.
+ * Copyright (C) 2006 Jonh Wendell <wendell@bani.com.br> 
+ * Copyright © 2010 Codethink Limited
+ * Copyright (C) 2013 Intel, Inc
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation; either version 2 of the
+ * License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful, but
+ * WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, see <http://www.gnu.org/licenses/>.
+ *
+ * Authors:
+ *      Mark McLoughlin <mark@skynet.ie>
+ *      Jonh Wendell <wendell@bani.com.br>
+ *      Ryan Lortie <desrt@desrt.ca>
+ */
+
+#pragma once
+
+#include <glib.h>
+#include <glib-object.h>
+
+GVariant * vino_set_authtype (const GValue       *value,
+                              const GVariantType *type,
+                              gpointer            user_data);
+gboolean vino_get_authtype (GValue   *value,
+                            GVariant *variant,
+                            gpointer  user_data);
+
+GVariant *
+vino_set_password (const GValue       *value,
+                   const GVariantType *type,
+                   gpointer            user_data);
+gboolean
+vino_get_password (GValue   *value,
+                   GVariant *variant,
+                   gpointer  user_data);
